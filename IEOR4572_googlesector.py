{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Shelby Jennings\n",
    "# IEOR4572, Professor Johar\n",
    "# Assignment 3: Google sector data\n",
    "    \n",
    "def google_sector_report():\n",
    "  \n",
    "    # List of sectors reported on Google page - used to check with page input later\n",
    "    list_sectors = ['Energy', 'Basic Materials', 'Industrials', 'Cyclical Cons. Goods ...',\n",
    "                   'Non-Cyclical Cons. Goods...', 'Financials', 'Healthcare', 'Technology',\n",
    "                   'Telecommunications Servi...', 'Utilities']\n",
    "    \n",
    "    d = {} # Final dict \n",
    "    d['STATUS'] = 'BAD' # Set default value of Status to Bad to indicate no data \n",
    "    d['result'] = {} # Setting up result entry to house sector information\n",
    "\n",
    "    # Get BeautifulSoup for web scraping of Google finance data\n",
    "    import requests\n",
    "    from bs4 import BeautifulSoup\n",
    "    url = \"https://www.google.com/finance\"\n",
    "    response = requests.get(url)\n",
    "    \n",
    "    # If get was successful move on to explore data \n",
    "    if response.status_code == 200:\n",
    "        d['STATUS'] = 'GOOD'\n",
    "        page_data_soup = BeautifulSoup(response.content, 'lxml')\n",
    "    \n",
    "        for tag in page_data_soup.find_all('a'): \n",
    "            for name in list_sectors:\n",
    "                if name == tag.get_text(): # If each sector name is found in link tag set \n",
    "                    sector_tag = tag # get name of sector from the tag's text\n",
    "                    sector_name = tag.get_text()                \n",
    "                    d['result'][name] = {} # Create entry dict for each sector in result\n",
    " \n",
    "                    for tag in page_data_soup.find_all('span'):\n",
    "                        if tag.get('class') == ['chg']: # Want to find change percentage in sector \n",
    "                            sector_chg = tag.get_text() # Search for tags with 'chg' and get text\n",
    "                            break # Stop to only record first find\n",
    "                    \n",
    "                    # Define link to access each sector specific page\n",
    "                    sector_link = 'https://www.google.com' + sector_tag.get('href')\n",
    "                    sector_response = requests.get(sector_link)\n",
    "                    \n",
    "                    # If get is successful move on to explore sector specific information \n",
    "                    if sector_response.status_code == 200:\n",
    "                        sector_data_soup = BeautifulSoup(sector_response.content, 'lxml')\n",
    "                    \n",
    "                        for tag in sector_data_soup.find_all('table'):\n",
    "                            if 'Gainers' in tag.get_text(): # Want to find name of top gainer \n",
    "                                biggest_gainer = tag.find('a').get_text() \n",
    "                                break # Break to only record the first entry i.e. the top gainer\n",
    "                        if biggest_gainer == None: # If there is no top gainer record as empty string \n",
    "                            biggest_gainer == \"\"\n",
    "                                \n",
    "                        for tag in sector_data_soup.find_all('span'):\n",
    "                            if tag.get('class') == ['chg']: # Want to find percentage change for top gainer\n",
    "                                if '%' in tag.get_text():\n",
    "                                    percent_chg_up = tag.get_text() # Search for 'chg' tags \n",
    "                                    break # then break after finding first entry\n",
    "                        if percent_chg_up == None: # If there is no percentage change \n",
    "                            percent_chg_up = \"Null\" # set to null\n",
    "                    \n",
    "                        for tag in sector_data_soup.find_all('table'):\n",
    "                            if 'Losers' in tag.get_text(): # Want to find name of top loser \n",
    "                                biggest_loser = tag.find_all('a')[10].get_text() # item at index 10 is 1st in loser list\n",
    "                        if biggest_loser == None: \n",
    "                            biggest_loser = \"\" \n",
    "\n",
    "                        for tag in sector_data_soup.find_all('span'):\n",
    "                            if tag.get('class') == ['chr']: # Want to find percentage change of top loser\n",
    "                                if '%' in tag.get_text(): \n",
    "                                    percent_chg_dwn = tag.get_text()\n",
    "                                    break\n",
    "                        if percent_chg_dwn == None: \n",
    "                            percent_chg_dwn = \"Null\" \n",
    "                    \n",
    "                    else: # If subsequent request was unsuccessful update Status to Bad\n",
    "                        d['Status'] = 'BAD'\n",
    "                        \n",
    "    \n",
    "                \n",
    "        # Add in all recorded values by sector into final dict\n",
    "        d['result'][sector_name] = {}\n",
    "        d['result'][sector_name]['biggest_loser'] = {}\n",
    "        d['result'][sector_name]['biggest_gainer'] = {}\n",
    "        d['result'][sector_name]['change'] = sector_chg\n",
    "        d['result'][sector_name]['biggest_gainer']['equity'] = biggest_gainer\n",
    "        d['result'][sector_name]['biggest_gainer']['change'] = percent_chg_up\n",
    "        d['result'][sector_name]['biggest_loser']['equity'] = biggest_loser\n",
    "        d['result'][sector_name]['biggest_loser']['change'] = percent_chg_dwn\n",
    "        \n",
    "        # If entire dict entry is missing for a sector, go back and record each key's value as below\n",
    "        for name in list_sectors:\n",
    "            if d['result'][name] == {}:\n",
    "                    d['result'][name]['change'] = \"Null\"\n",
    "                    d['result'][name]['biggest_gainer'] = {}\n",
    "                    d['result'][name]['biggest_gainer']['equity'] = \"\"\n",
    "                    d['result'][name]['biggest_gainer']['change'] = \"Null\"\n",
    "                    d['result'][name]['biggest_loser'] = {}\n",
    "                    d['result'][name]['biggest_loser']['equity'] = \"\"\n",
    "                    d['result'][name]['biggest_loser']['change'] = \"Null\"\n",
    "            \n",
    "            \n",
    "        \n",
    "        import json \n",
    "        return json.dumps(d) # Final output \n",
    "    \n",
    "    else: # If initial request was unsuccessful return \"empty\" final dictionary \n",
    "        import json\n",
    "        return json.dumps(d)\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
