{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Shelby Jennings, ssj2124\n",
    "# IEOR W4572, Professor Johar\n",
    "# Assignment 2\n",
    "\n",
    "# Problems 1 - 5\n",
    "\n",
    "def word_distribution(text, proportion=0, word_list=None, case=0):\n",
    "    word_count = {}\n",
    "    words = text.split() \n",
    "    num_capital = 0 # This is used to track number of capital letter words for proportion count\n",
    "\n",
    "    # CASE 1 - WANT TO CONSIDER ONLY WORDS STARTING WITH CAPITAL LETTER\n",
    "    if case==1:     \n",
    "        # LIST ARGUMENT    \n",
    "        if word_list != None: # NON EMPTY WORD LIST - WANT TO CONSIDER ONLY WORDS IN GIVEN LIST\n",
    "            for item in words: \n",
    "                if item in word_list or item[:-1] in word_list: # IF WORD MATCHES W/O PUNCTUATION\n",
    "                    if 65 <= ord(item[0]) <= 90:\n",
    "                        if 0 <= ord(item[-1]) < 65 or 90 < ord(item[-1]) < 97 or ord(item[-1]) > 122:\n",
    "                            item = item[:-1] # REMOVE LAST CHARACTER IF NOT A LETTER\n",
    "                        else: \n",
    "                            item = item\n",
    "                    # PROPORTION\n",
    "                    if proportion == 1: # PROPORTION IS 1\n",
    "                        if word_count.get(item, None) == None:\n",
    "                            word_count[item] = 1/len(word_list) # DIVIDE BY TOTAL IN LIST\n",
    "                        else: \n",
    "                            word_count[item] = (word_count.get(item) + 1) / len(word_list) \n",
    "                    elif proportion == 0: # PROPORTION IS 0\n",
    "                        if word_count.get(item, None) == None:\n",
    "                            word_count[item] = 1\n",
    "                        else: \n",
    "                            word_count[item] = word_count.get(item) + 1\n",
    "        \n",
    "        elif word_list == None: # EMPTY WORD LIST - CONSIDERING ALL WORDS INPUTTED IN FUNCTION WITH CAPITAL 1st LETTER\n",
    "            for item in words:\n",
    "            # Order range for upper case letters 97-122\n",
    "                if 65 <= ord(item[0]) <= 90:\n",
    "                    num_capital = num_capital + 1 # Keeping track of number of capital words for proportion\n",
    "                    if 0 <= ord(item[-1]) < 65 or 90 < ord(item[-1]) < 97 or ord(item[-1]) > 122:\n",
    "                        item = item[:-1] # REMOVE LAST CHARACTER IF NOT A LETTER\n",
    "                    else: \n",
    "                        item = item \n",
    "                    # PROPORTION \n",
    "                    if proportion == 1: # PROPORTION IS 1 - WANT RATIO OF WORD TO TOTAL NOT JUST COUNT\n",
    "                        if word_count.get(item, None) == None:\n",
    "                            word_count[item] = 1 / num_capital # DIVIDE BY NUMBER OF CAPITAL 1st LETTERS\n",
    "                        else: \n",
    "                            word_count[item] = (word_count.get(item) + 1) / num_capital\n",
    "                    elif proportion == 0: # PROPORTION IS 0 - WANT RAW COUNT OF WORD\n",
    "                        if word_count.get(item, None) == None:\n",
    "                            word_count[item] = 1\n",
    "                        else: \n",
    "                            word_count[item] = word_count.get(item) + 1\n",
    "    \n",
    "    # CASE 0 - CONSIDER ALL WORDS INPUTTED IN FUCTION REGARDLESS OF CASE OF 1st LETTER\n",
    "    elif case==0:\n",
    "        # LIST ARGUMENT \n",
    "        if word_list != None: # NON EMPTY WORD LIST - CONSIDER ALL WORDS GIVEN THEY'RE ALSO IN LIST\n",
    "            for item in words:\n",
    "                if item in word_list or item[:-1] in word_list:\n",
    "                    item = item.lower()\n",
    "                    #Order range for alphabet characters: 65-90 and 97-122\n",
    "                    if 0 <= ord(item[-1]) < 65 or 90 < ord(item[-1]) < 97 or ord(item[-1]) > 122: \n",
    "                        item = item[:-1] # REMOVE LAST CHARACTER IF NOT A LETTER\n",
    "                    else: \n",
    "                        item = item \n",
    "                    # PROPORTION\n",
    "                    if proportion == 1: # PROPORTION IS 1 - WANT RATIO OF WORD TO TOTAL NOT JUST COUNT\n",
    "                        if word_count.get(item, None) == None:\n",
    "                            word_count[item] = 1 / len(word_list)\n",
    "                        else: \n",
    "                            word_count[item] = (word_count.get(item) + 1) / len(word_list)\n",
    "                    elif proportion == 0: # PROPORTION IS 0 - WANT RAW COUNT OF WORD\n",
    "                        if word_count.get(item, None) == None:\n",
    "                            word_count[item] = 1\n",
    "                        else: \n",
    "                            word_count[item] = word_count.get(item) + 1\n",
    "                            \n",
    "        elif word_list == None: # EMPTY WORD LIST - CONSIDER ALL WORDS INPUTTED IN FUNCTION\n",
    "            for item in words:\n",
    "                item = item.lower()\n",
    "                # Order range for alphabet characters: 65-90 and 97-122\n",
    "                if 0 <= ord(item[-1]) < 65 or 90 < ord(item[-1]) < 97 or ord(item[-1]) > 122:\n",
    "                    item = item[:-1] # REMOVE LAST CHARACTER IF NOT A LETTER\n",
    "                else: \n",
    "                    item = item \n",
    "                \n",
    "                # PROPORTION\n",
    "                if proportion == 1: # PROPORTION IS 1 - WANT RATIO OF WORD TO TOTAL NOT JUST COUNT\n",
    "                    if word_count.get(item, None) == None:\n",
    "                        word_count[item] = 1 / len(words) # DIVIDE BY NUMBER OF WORDS IN INPUT\n",
    "                    else: \n",
    "                        word_count[item] = (word_count.get(item) + 1) / len(words)\n",
    "                elif proportion == 0: # PROPORTION IS 0 - WANT RAW COUNT OF WORD\n",
    "                    if word_count.get(item, None) == None:\n",
    "                        word_count[item] = 1\n",
    "                    else: \n",
    "                        word_count[item] = word_count.get(item) + 1\n",
    "    \n",
    "    # SORTING VALUES IN WORD_COUNT BY VALUE (NOT KEY)\n",
    "    from operator import itemgetter\n",
    "    sorted_word_count = sorted(word_count.items(),key=itemgetter(1),reverse=True)\n",
    "    return sorted_word_count\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
